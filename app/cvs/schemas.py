from datetime import datetime
from typing import Optional, List
from uuid import UUID

from pydantic import BaseModel, Field


class CvReadSchema(BaseModel):
    uuid: UUID
    github_profile_link: str
    filename: str
    full_path: str
    user_uuid: UUID
    created_at: datetime
    updated_at: datetime
    json_data: dict


class CvGenerateSchema(BaseModel):
    class PersonalInformation(BaseModel):
        name: str
        github_profile_link: str
        bio: str = Field(description="'Bio' must be at least 100 characters and at most 200")
        speaking_languages: str
        location: Optional[str] = Field(
            ...,
            description="If not 'Location' is provided, it will be set to 'None' and should not be generated"
        )
        contact_information: Optional[str] = Field(
            ...,
            description="If not 'Contact information' is provided, it will be set to 'None' and should not be generated"
        )

    class AboutMe(BaseModel):
        about_me: str = Field(description="'About me' must be at least 700 characters and at most 1000")
        technical_skills: List[str]
        soft_skills: List[str]

    class Project(BaseModel):
        name: str
        full_name: str
        project_link: str
        description: str = Field(description="'Description' must be at least 100 characters and at most 200")
        achievements: str
        technologies: List[str]

    class Experience(BaseModel):
        role: str
        duration: str
        description: str = Field(description="'Description' must be at least 300 characters and at most 500")

    class Disclaimer(BaseModel):
        disclaimer: str = Field(description='This CV is generated by AI')

    personal_information: PersonalInformation
    about_me: AboutMe
    projects: List[Project]
    experience: List[Experience]
    disclaimer: Disclaimer
